image: "node:latest"

cache:
  paths:
  - node_modules/

stages:
  - build
  - test
  - analysis
  - deploy

build:
  stage: build
  script:
    - "npm install"

test_mocha:
  stage: test
  script:
    - "npm install mocha"
    - "npm test"

sonarqube:
  stage: analysis
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: "https://cdelivery.fh-stralsund.de"
    SONAR_ANALYSIS_MODE: issues
  script:
  - gitlab-sonar-scanner -X

sonarqube-reports:
  stage: analysis
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: "https://cdelivery.fh-stralsund.de"
    SONAR_ANALYSIS_MODE: publish
  script:
  - gitlab-sonar-scanner -X

deploy_production:
  stage: deploy
  only: 
    - live
  before_script:
    - mkdir -p ~/.ssh
    - echo -e "$DEPLOYMENT_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - apt-get update -y && apt-get install -y ssh
  script:
    - ssh -v -p${DEPLOYMENT_SERVER_PORT} ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP} "docker stop docker-mainline || true && docker rm docker-mainline || true && docker build --build-arg BRANCH=live --no-cache -t mainline . && docker run -d -p 80:3000 --name='docker-mainline' mainline"
    
deploy_test:
  stage: deploy
  only: 
    - master
  before_script:
    - mkdir -p ~/.ssh
    - echo -e "$DEPLOYMENT_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - apt-get update -y && apt-get install -y ssh
  script:
    - ssh -v -p${DEPLOYMENT_SERVER_PORT} ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP} "docker stop docker-test || true && docker rm docker-test || true && docker build --build-arg BRANCH=master --no-cache -t test . && docker run -d -p 81:3000 --name='docker-test' test"
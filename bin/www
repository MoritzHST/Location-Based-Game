#!node
/*#!/usr/bin/env node*/

/**
 * express-generator generated file
 *
 * Markus B�hr, HOST
 * M�rz 2018
 */

/**
 * Module dependencies.
 */

var logging = require('../helper/logging');
logging.initLogging();
logging.deleteLogFiles();
logging.Info("Starte Applikation (" + process.env.env + ")");

var mongoPath = '../mongodb/';
var mongo = require(mongoPath + 'initialize');

/**
 * Object examples
 */

require('../data/mongo_data');


/**
 * Server Requirements
 */

var app = require('../app');
var debug = require('debug')('nodejsprototype:server');
var http = require('http');
var WebSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * WebSocket
 */

var count = 0;
var clients = {};
var wsServer = new WebSocketServer({
   httpServer: server 
});

wsServer.on('request', function(req) {
    var connection = req.accept('echo-protocol', req.origin);
    
    //Specific id for this client & increment count
    var id = count++;
    // Store the connection method so we can loop through & contact all clients
    clients[id] = connection;
    logging.Info((new Date()) + ' Connection accepted [' + id + ']');
    
    connection.on('message', function(message) {
        var msgString = message.utf8Data;
        
        for (var i in clients) {
            if (clients[i] !== connection)
                clients[i].sendUTF(msgString);
        }
    });
    
    //ToDo: call on logout
    connection.on('close', function(reasonCode, description) {
        delete clients[id];
        logging.Info((new Date()) + 'Peer' + connection.remoteAddress + ' disconnected.');
    })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger",
    "description": "Testen von verschiedenen GET/POST Methoden",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/find/users": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": false,
          "description": "ID des Benutzers"
        },
        {
          "name": "name",
          "in": "query",
          "required": false,
          "description": "Name des Benutzers"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "responses": {
          "200": {
            "description": "Benutzer wurde(n) gefunden",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/insert/users": {
      "parameters": [
        {
          "name": "name",
          "in": "query",
          "required": true,
          "description": "Name des Benutzers"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Insert User",
        "responses": {
          "200": {
            "description": "Benutzer wurde hinzugefügt",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/update/users/{_id}": {
      "parameters": [
        {
          "name": "_id",
          "in": "path",
          "required": true,
          "description": "ID des Benutzers"
        },
        {
          "name": "name",
          "in": "query",
          "required": false,
          "description": "Neuer Name des Benutzers"
        },
        {
          "name": "token",
          "in": "query",
          "required": false,
          "description": "Neuer Token des Benutzers"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "responses": {
          "200": {
            "description": "Benutzerinformation wurden aktualisiert",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/delete/users": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": true,
          "description": "ID des Benutzers"
        },
        {
          "name": "name",
          "in": "query",
          "required": false,
          "description": "Name des Benutzers"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "responses": {
          "200": {
            "description": "Benutzer wurde gelöscht",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/find/locations": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": false,
          "description": "ID des Raumes"
        },
        {
          "name": "roomnumber",
          "in": "query",
          "required": false,
          "description": "Raumnummer"
        },
        {
          "name": "identifier",
          "in": "query",
          "required": false,
          "description": "Raum-Identifier"
        }
      ],
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get Location",
        "responses": {
          "200": {
            "description": "Location wurde gefunden",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/insert/locations": {
      "parameters": [
        {
          "name": "roomnumber",
          "in": "query",
          "required": false,
          "description": "Raumnummer"
        },
        {
          "name": "identifier",
          "in": "query",
          "required": true,
          "description": "Raum-Identifier"
        }
      ],
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Insert Location",
        "responses": {
          "200": {
            "description": "Location wurde hinzugefügt",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/update/locations/{_id}": {
      "parameters": [
        {
          "name": "_id",
          "in": "path",
          "required": true,
          "description": "ID des Raumes"
        },
        {
          "name": "roomnumber",
          "in": "query",
          "required": false,
          "description": "Raumnummer"
        },
        {
          "name": "identifier",
          "in": "query",
          "required": false,
          "description": "Raum-Identifier"
        }
      ],
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Update Location",
        "responses": {
          "200": {
            "description": "Locationinformationen wurden aktualisiert",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/delete/locations": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": true,
          "description": "ID des Raumes"
        },
        {
          "name": "roomnumber",
          "in": "query",
          "required": false,
          "description": "Raumnummer"
        },
        {
          "name": "identifier",
          "in": "query",
          "required": false,
          "description": "Raum-Identifier"
        }
      ],
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete Location",
        "responses": {
          "200": {
            "description": "Location wurde gelöscht",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/find/minigames": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": false,
          "description": "ID des Minigames"
        }
      ],
      "get": {
        "tags": [
          "Minigames"
        ],
        "summary": "Get Minigame",
        "responses": {
          "200": {
            "description": "Minigame wurde gefunden",
            "schema": {
              "$ref": "#/definitions/Minigame"
            }
          }
        }
      }
    },
    "/insert/minigames": {
      "parameters": [
        {
          "name": "type",
          "in": "query",
          "required": true,
          "description": "Typ des Minispiels"
        },
        {
          "name": "points",
          "in": "query",
          "required": true,
          "description": "Anzahl Punkte für die richtige Beantwortung"
        },
        {
          "name": "anwers",
          "in": "body",
          "required": false,
          "description": "Antworten",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Answer"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Minigames"
        ],
        "summary": "Insert Minigame",
        "responses": {
          "200": {
            "description": "Raum wurde hinzugefügt",
            "schema": {
              "$ref": "#/definitions/Minigame"
            }
          }
        }
      }
    },
    "/update/minigames/{_id}": {
      "parameters": [
        {
          "name": "_id",
          "in": "path",
          "required": true,
          "description": "ID des Minigames"
        },
        {
          "name": "question",
          "in": "query",
          "required": false,
          "description": "Text zum Minigame"
        },
        {
          "name": "type",
          "in": "query",
          "required": false,
          "description": "Typ des Minispiels"
        },
        {
          "name": "anwers",
          "in": "body",
          "required": false,
          "description": "Antworten",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Answer"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Minigames"
        ],
        "summary": "Update Minigames",
        "responses": {
          "200": {
            "description": "Spielinformationen wurden aktualisiert",
            "schema": {
              "$ref": "#/definitions/Minigame"
            }
          }
        }
      }
    },
    "/delete/minigames": {
      "parameters": [
        {
          "name": "_id",
          "in": "query",
          "required": true,
          "description": "ID des Raumes"
        },
        {
          "name": "room_id",
          "in": "query",
          "required": false,
          "description": "ID des Raumes"
        },
        {
          "name": "question",
          "in": "query",
          "required": false,
          "description": "Text zum Minigame"
        }
      ],
      "post": {
        "tags": [
          "Minigames"
        ],
        "summary": "Delete Room",
        "responses": {
          "200": {
            "description": "Raum wurde gelöscht",
            "schema": {
              "$ref": "#/definitions/Minigame"
            }
          }
        }
      }
    },
    "/find/scan": {
      "parameters": [
        {
          "name": "identifier",
          "in": "query",
          "required": true,
          "description": "Raum-Identifier"
        }
      ],
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get ScanResult",
        "responses": {
          "200": {
            "description": "Minigame wurde gefunden",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "name": {
          "type": "string",
          "uniqueItems": true
        },
        "token": {
          "type": "integer"
        }
      }
    },
    "Location": {
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "type": "integer",
          "uniqueItems": true
        },
        "roomnumber": {
          "type": "string",
          "uniqueItems": true
        },
        "identifier": {
          "type": "string",
          "uniqueItems": true
        }
      }
    },
    "Minigame": {
      "required": [
        "answer",
        "isCorrect"
      ],
      "properties": {
        "question": {
          "type": "string"
        },
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Answer"
          }
        }
      }
    },
    "Answer": {
      "required": [
        "answer",
        "isCorrect"
      ],
      "properties": {
        "answer": {
          "type": "string"
        },
        "isCorrect": {
          "type": "boolean"
        }
      }
    },
    "Scan": {
      "required": [],
      "properties": {
        "room": {
          "$ref": "#/definitions/Room"
        },
        "minigames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Minigame"
          }
        }
      }
    }
  }
}